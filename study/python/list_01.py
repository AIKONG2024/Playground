# list

# 파이썬 리스트
# 자료구조에서 중요
# 컨테이너
# 배열과 대체해서 사용가능.
# 순서가 있음, 중복도 가능, 수정도 가능, 삭제도 가능한 유일한 자료형

# 선언방식 1 
a = []
# 리스트 타입 찍어보기
print(type(a))  # <class 'list'>

#선언방식 2
b = list()
#선언방식 1
c = [70, 75, 80, 85]
#리스트 길이
print(len(c))  # 4
# 서로 다른 데이터형을 한 리스트안에 넣을수 있음.
d = [1000, 10000.1, "Ace", "Base", "Captine"]
# 리스트 안에 리스트도 담을 수 있음
e = [1000, 10000.1, ["Ace", "Base", "Captine"]]
# 다양한 데이터형 담가 가능함
f = [21.42, "foobar", 3, 4, False, 3.14159]

# 인덱싱 - 리스트 안의 데이터를 꺼내옴
print("d -", type(d), d)  # d - <class 'list'> [1000, 10000.1, 'Ace', 'Base', 'Captine']
print("d - ", d[1])  # 10000.1
print("d - ", d[0] + d[1])  # d -  11000.1
print("d - ", d[-1])  # d -  Captine 가장 뒤에 데이터 출력.
print("e - ", type(e[-1][1]))  # e -  <class 'str'>
print("e - ", list(e[-1][1]))  # 문자열을 list로 선언하면 알아서 잘라줌 e -  ['B', 'a', 's', 'e']

# 슬라이싱 - 리스트의 range 단위
print("d - ", d[0:3])  # d -  [1000, 10000.1, 'Ace'] 0,1,2 인덱스의 데이터가 출력
print("d - ", d[2:])  # d -  ['Ace', 'Base', 'Captine'] 2부터 마지막까지 출력
print("e - ", e[-1][1:3])  # ['Base', 'Captine'] 마지막 데이터가 배열이고 배열의 1~3 원소 출력

# 리스트 연산 - 리스트를 연산하면 리스트가 결과로 나옴.
print(">>>>>")
#덧셈
print("c + d", c + d)  # c + d [70, 75, 80, 85, 1000, 10000.1, 'Ace', 'Base', 'Captine'] 
#곱셈
print("c * 3", c * 3)  # c * 3 [70, 75, 80, 85, 70, 75, 80, 85, 70, 75, 80, 85]
#원자를 가져온 후 형변환 뒤 덧셈
print("test + c[0]", "Test" + str(c[0]))  # test + c[0] Test70

# 값 비교
print(c == c[:3] + c[3:])  # True

# Identity(id)
temp = c
print(temp, c)
print(id(temp))  # 1920881489024
print(id(c))  # 1920881489024
# 같은 주소를 보고있음. 한쪽이 메모리에서 없어지면 한쪽도 자동으로 사라짐.

# 리스트 수정, 삭제
print(">>>>>")
#리스트의 0번째 인덱스에 4를 넣어줌
c[0] = 4
print("c - ", c)  # c -  [4, 75, 80, 85] c의 0번째 값이 수정 되었음.
c[1:2] = ["a", "b", "c"]
print("c - ", c)  # c -  [4, 'a', 'b', 'c', 80, 85] 지정한 범위에 값을 넣을 수 있음.
c[1:2] = [["a", "b", "c"]]
print("c - ", c)  # c -  [4, ['a', 'b', 'c'], 80, 85] #마찬가지로 값을 배열 형태로 넣을 수있음
c[1] = ["a", "b", "c"]
print("c - ", c)
# c -  [4, 'a', 'b', 'c', 80, 85] 슬라이싱이 아닌 인덱싱으로 넣으면
# 값이 원소로 들어가지 않고 리스트 형태로 들어감
c[1:3] = []
print("c - ", c)  # c -  [4, 'c', 80, 85] 리스트 안의 원소가 삭제됨.
del c[2] #예약어
print("c - ", c)  # c -  [4, 'c', 85] del 예약어로 해당 인덱스의 원소 삭제

# 리스트 함수
a = [5, 2, 3, 1, 4]
print('a - ', a) #a -  [5, 2, 3, 1, 4]
# a[5] = 10
print('a - ', a) # 없는 인덱스에 값을 넣어 오류 발생
a.append(10)  
print('a - ', a) #a -  [1, 2, 3, 4, 5, 10] append()함수로 값을 더함
a.sort()
print('a - ', a) #a -  [1, 2, 3, 4, 5, 10] sort()함수로 오름차순으로 정렬.
a.reverse()
print('a - ', a) #a -  [10, 5, 4, 3, 2, 1] reverse()함수로 현재 리스트의 반대로 만들어줌.
print('a - ', a.index(3), a[3]) #a -  3 3 /index를 가져오는 두가지 방법
a.insert(2, 7)
print('a - ', a) #a -  [10, 5, 7, 4, 3, 2, 1] insert()함수로 인덱스에 값을 넣어줌. 다른 값은 밀려남
del a[6] #예약어
print('a - ', a) #a -  [10, 5, 7, 4, 3, 2] 인덱스 6번째의 값이 지워짐.
a.remove(10)
print('a - ', a) #a -  [5, 7, 4, 3, 2] remove() 함수로 값을 지움.
print('a - ', a.pop()) #a -  2 / 가장 뒤의 값을 꺼내서 출력하고, 배열에서 지움.
print('a - ', a)  #pop으로 2가 지워짐
print('a - ', a.count("사과")) #0 사과가 있는 원소수 반환 (없어서 0이 반환됨)
ex = [8,9]
a.extend(ex)
print('a - ',a) #뒤에 추가됨.

#반복문 활용 (비어있을 때 까지 데이터 꺼냄)
while a:
    data = a.pop()
    print(data)  



